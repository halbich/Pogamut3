/* Generated By:JavaCC: Do not edit this line. ShadyParser.java */
package cz.cuni.amis.pogamut.shady;

import java.util.*;

public class ShadyParser implements ShadyParserConstants {
    char cleanChar(String string) throws ParseException {
        return ArgChar.parseCharacterListeral(string);
    }

    String cleanString(String string) throws ParseException {
        return ArgString.parseStringLiteral(string);
    }

  final public ShadeTree plan() throws ParseException {
    ShadeNode node;
    List<ShadeNode> nodes = new ArrayList<ShadeNode>();
    jj_consume_token(7);
    label_1:
    while (true) {
      node = node();
                        nodes.add(node);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 7:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(8);
    jj_consume_token(0);
      {if (true) return new ShadeTree(nodes);}
    throw new Error("Missing return statement in function");
  }

  final public ShadeNode node() throws ParseException {
    String name;
    Token descr;
    NodeElement element;
    List<NodeElement> elements = new ArrayList<NodeElement>();
    jj_consume_token(7);
    jj_consume_token(6);
    name = name();
    descr = jj_consume_token(STRING_LITERAL);
    label_2:
    while (true) {
      element = element();
                              elements.add(element);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 7:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(8);
      {if (true) return new ShadeNode(name, cleanString(descr.image), elements);}
    throw new Error("Missing return statement in function");
  }

  final public NodeElement element() throws ParseException {
    IQuery priority;
    IQuery trigger;
    NodeCall call;
    jj_consume_token(7);
    priority = priority();
    trigger = trigger();
    call = call();
    jj_consume_token(8);
      {if (true) return new NodeElement(priority, trigger, call);}
    throw new Error("Missing return statement in function");
  }

  final public IQuery priority() throws ParseException {
    IQuery query;
    query = value();
                    {if (true) return query;}
    throw new Error("Missing return statement in function");
  }

  final public IQuery trigger() throws ParseException {
    IQuery query;
    IQuery arg;
    IQuery op1, op2;
    List<IQuery> args = new LinkedList<IQuery>();
    Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL_LITERAL:
      token = jj_consume_token(DECIMAL_LITERAL);
      {if (true) return new QueryInt(Integer.parseInt(token.image));}
      break;
    case FLOATING_POINT_LITERAL:
      token = jj_consume_token(FLOATING_POINT_LITERAL);
      {if (true) return new QueryFloat(Double.parseDouble(token.image));}
      break;
    case 7:
      jj_consume_token(7);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        query = queryCall();
                            {if (true) return query;}
        break;
      case 10:
        jj_consume_token(10);
        arg = trigger();
        jj_consume_token(8);
                                   {if (true) return new QueryNot(arg);}
        break;
      case 9:
        jj_consume_token(9);
        label_3:
        while (true) {
          arg = trigger();
                                args.add(arg);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 7:
          case DECIMAL_LITERAL:
          case FLOATING_POINT_LITERAL:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_3;
          }
        }
        jj_consume_token(8);
                                                          {if (true) return new QueryAnd(args);}
        break;
      case 11:
        jj_consume_token(11);
        label_4:
        while (true) {
          arg = trigger();
                                args.add(arg);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 7:
          case DECIMAL_LITERAL:
          case FLOATING_POINT_LITERAL:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_4;
          }
        }
        jj_consume_token(8);
                                                          {if (true) return new QueryOr(args);}
        break;
      case GT:
        jj_consume_token(GT);
        op1 = value();
        op2 = value();
        jj_consume_token(8);
                                           {if (true) return new QueryGt(op1, op2);}
        break;
      case GE:
        jj_consume_token(GE);
        op1 = value();
        op2 = value();
        jj_consume_token(8);
                                           {if (true) return new QueryGe(op1, op2);}
        break;
      case EQ:
        jj_consume_token(EQ);
        op1 = value();
        op2 = value();
        jj_consume_token(8);
                                           {if (true) return new QueryEq(op1, op2);}
        break;
      case NE:
        jj_consume_token(NE);
        op1 = value();
        op2 = value();
        jj_consume_token(8);
                                           {if (true) return new QueryNe(op1, op2);}
        break;
      case LE:
        jj_consume_token(LE);
        op1 = value();
        op2 = value();
        jj_consume_token(8);
                                           {if (true) return new QueryLe(op1, op2);}
        break;
      case LT:
        jj_consume_token(LT);
        op1 = value();
        op2 = value();
        jj_consume_token(8);
                                           {if (true) return new QueryLt(op1, op2);}
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IQuery value() throws ParseException {
    IQuery query;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      query = queryCall();
      {if (true) return query;}
      break;
    case DECIMAL_LITERAL:
      token = jj_consume_token(DECIMAL_LITERAL);
      {if (true) return new QueryInt(Integer.parseInt(token.image));}
      break;
    case FLOATING_POINT_LITERAL:
      token = jj_consume_token(FLOATING_POINT_LITERAL);
      {if (true) return new QueryFloat(Double.parseDouble(token.image));}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Querycall is expected to return a value, i.e. it directly calls some primitive
// normal call just descends further into a tree/calls a primitive and doesn't
// care about returned value.
  final public QueryCall queryCall() throws ParseException {
    String name;
    List<IArgument> args;
    name = name();
    args = args();
    jj_consume_token(8);
                                  {if (true) return new QueryCall(name, args);}
    throw new Error("Missing return statement in function");
  }

  final public NodeCall call() throws ParseException {
    String name;
    List<IArgument> args;
    jj_consume_token(7);
    name = name();
    args = args();
    jj_consume_token(8);
                                      {if (true) return new NodeCall(name, args);}
    throw new Error("Missing return statement in function");
  }

  final public List<IArgument> args() throws ParseException {
    List<IArgument> args = new LinkedList<IArgument>();
    IArgument arg;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECIMAL_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      arg = arg();
                  args.add(arg);
    }
                                       {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

// TODO: what about variables?
  final public IArgument arg() throws ParseException {
    Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL_LITERAL:
      token = jj_consume_token(DECIMAL_LITERAL);
      {if (true) return new ArgInt(Integer.parseInt(token.image));}
      break;
    case FLOATING_POINT_LITERAL:
      token = jj_consume_token(FLOATING_POINT_LITERAL);
      {if (true) return new ArgFloat(Double.parseDouble(token.image));}
      break;
    case CHARACTER_LITERAL:
      token = jj_consume_token(CHARACTER_LITERAL);
      {if (true) return new ArgChar(cleanChar(token.image));}
      break;
    case STRING_LITERAL:
      token = jj_consume_token(STRING_LITERAL);
      {if (true) return new ArgString(cleanString(token.image));}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//
// Parse the name, name can be either identifier or sequence of identifiers
// connected with ".". Used for name of a class.
//
  final public String name() throws ParseException {
    Token token;
    String name;
    token = jj_consume_token(IDENTIFIER);
                         name = token.toString();
    label_6:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(26);
      token = jj_consume_token(IDENTIFIER);
            name += '.';
            name += token.image;
    }
      {if (true) return  name;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3_1() {
    if (jj_scan_token(26)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ShadyParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0x80,0x600080,0x600080,0x7fe00,0x600080,0x600080,0x3600000,0x3600000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ShadyParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ShadyParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ShadyParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ShadyParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ShadyParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ShadyParser(ShadyParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ShadyParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[27];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 27; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
