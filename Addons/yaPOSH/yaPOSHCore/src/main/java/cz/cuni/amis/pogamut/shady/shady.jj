/* Shady
 * =====
 * Shady is a simple if-then tree like reactive planner. In this file, we define
 * grammer for paring its files and creating in-memory representation.
 *
 * (c) 2011 by Honza Havlíček
 */

options {
//  DEBUG_PARSER = true;
//  DEBUG_LOOKAHEAD = true;
  STATIC = false;
  IGNORE_CASE = false;
  FORCE_LA_CHECK = true;
}

PARSER_BEGIN(ShadyParser)
package cz.cuni.amis.pogamut.shady;

import java.util.*;

public class ShadyParser {
    char cleanChar(String string) throws ParseException {
        return ArgChar.parseCharacterListeral(string);
    }

    String cleanString(String string) throws ParseException {
        return ArgString.parseStringLiteral(string);
    }
}
PARSER_END(ShadyParser)

// Skip whitespaces
SKIP :
{
    " "
|   "\t"
|   "\n"
|   "\r"
|   "\f"
}

//  Top keywords
TOKEN :
{
    "node"
|   "("
|   ")"
|   "and"
|   "not"
|   "or"
}

// Comparison signs
TOKEN :
{
    < GT: ">" >
|   < GE: ">=" >
|   < EQ: "=" >
|   < NE: "!=" >
|   < LE: "<=" >
|   < LT: "<" >
}

// Identifier is used to reference classes in the engine. It should have same
// rules as FQN name of class + it allows hypen.
TOKEN :
{
  <IDENTIFIER: <LETTER> (<PART_LETTER>)* >
| <#LETTER: "$" | ["A"-"Z"] | "_" | ["a"-"z"] >
| <#PART_LETTER: "$" | ["0"-"9"] | ["A"-"Z"] | "_" | "-" | ["a"-"z"] >
}

// Tokens for values
TOKEN :
{
    < DECIMAL_LITERAL: (("-")? ["1"-"9"] (["0"-"9"])*) | "0" >
|   < FLOATING_POINT_LITERAL:
        ("-")? ((["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"])
  >
|   < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|   < CHARACTER_LITERAL:
      "'"
      (  (~["'","\\","\n","\r"]) | 
       ( "\\" ( ["b", "t", "n", "f", "r", "'", "\"", "\\"] 
              | ["0"-"3"] ["0"-"7"] ["0"-"7"]
              | ["0"-"7"] ["0"-"7"]
              | ["0"-"7"]
              | ("u")+ ["0"-"9", "a"-"f", "A"-"F"] ["0"-"9", "a"-"f", "A"-"F"] ["0"-"9", "a"-"f", "A"-"F"] ["0"-"9", "a"-"f", "A"-"F"]
              )
       )
      )
      "'"
    >
|   < STRING_LITERAL:
      "\"" (
        (~["\"", "\\", "\n", "\r"]) | 
        ("\\" ( ["b", "t", "n", "f", "r", "'", "\"", "\\"] 
              | ["0"-"3"] ["0"-"7"] ["0"-"7"]
              | ["0"-"7"] ["0"-"7"]
              | ["0"-"7"]
              | ("u")+ ["0"-"9", "a"-"f", "A"-"F"] ["0"-"9", "a"-"f", "A"-"F"] ["0"-"9", "a"-"f", "A"-"F"] ["0"-"9", "a"-"f", "A"-"F"]
              )
        )
      )* "\""
    >
}


ShadeTree plan():
{
    ShadeNode node;
    List<ShadeNode> nodes = new ArrayList<ShadeNode>();
}
{
    "(" ( node=node() { nodes.add(node); } )+ ")" <EOF>
    { return new ShadeTree(nodes); }
}


ShadeNode node():
{
    String name;
    Token descr;
    NodeElement element;
    List<NodeElement> elements = new ArrayList<NodeElement>();
}
{
    "(" "node" name=name() descr=<STRING_LITERAL> 
        ( element=element() { elements.add(element); } )+ ")"
    { return new ShadeNode(name, cleanString(descr.image), elements); }
}


NodeElement element():
{
    IQuery priority;
    IQuery trigger;
    NodeCall call;
}
{
    "(" priority=priority() trigger=trigger() call=call() ")"
    { return new NodeElement(priority, trigger, call); }
}


IQuery priority():
{
    IQuery query;
}
{
    query=value() { return query; }
}


IQuery trigger():
{
    IQuery query;
    IQuery arg;
    IQuery op1, op2;
    List<IQuery> args = new LinkedList<IQuery>();
    Token token;
}
{
    token=<DECIMAL_LITERAL>
    { return new QueryInt(Integer.parseInt(token.image)); }
|   token=<FLOATING_POINT_LITERAL>
    { return new QueryFloat(Double.parseDouble(token.image)); }
| "(" 
    (   query=queryCall() { return query; }
    |   "not"  arg=trigger() ")" { return new QueryNot(arg); }
    |   "and" ( arg=trigger() { args.add(arg); } )+ ")" { return new QueryAnd(args); }
    |   "or"  ( arg=trigger() { args.add(arg); } )+ ")" { return new QueryOr(args); }
    |   ">"  op1=value() op2=value() ")" { return new QueryGt(op1, op2); }
    |   ">=" op1=value() op2=value() ")" { return new QueryGe(op1, op2); }
    |   "="  op1=value() op2=value() ")" { return new QueryEq(op1, op2); }
    |   "!=" op1=value() op2=value() ")" { return new QueryNe(op1, op2); }
    |   "<=" op1=value() op2=value() ")" { return new QueryLe(op1, op2); }
    |   "<"  op1=value() op2=value() ")" { return new QueryLt(op1, op2); }
    )
}


IQuery value():
{
    IQuery query;
}
{
    "(" query=queryCall()
    { return query; }
|   token=<DECIMAL_LITERAL>
    { return new QueryInt(Integer.parseInt(token.image)); }
|   token=<FLOATING_POINT_LITERAL>
    { return new QueryFloat(Double.parseDouble(token.image)); }
}


// Querycall is expected to return a value, i.e. it directly calls some primitive
// normal call just descends further into a tree/calls a primitive and doesn't
// care about returned value.
QueryCall queryCall():
{
    String name;
    List<IArgument> args;
}
{
    name=name() args=args() ")" { return new QueryCall(name, args); }
}

NodeCall call():
{
    String name;
    List<IArgument> args;
}
{
    "(" name=name() args=args() ")" { return new NodeCall(name, args); }
}

List<IArgument> args():
{
    List<IArgument> args = new LinkedList<IArgument>();
    IArgument arg;
}
{
    ( arg=arg() { args.add(arg); } )* {return args; }
}


// TODO: what about variables?
IArgument arg():
{
    Token token;
}
{
    token=<DECIMAL_LITERAL>
    { return new ArgInt(Integer.parseInt(token.image)); }
|   token=<FLOATING_POINT_LITERAL>
    { return new ArgFloat(Double.parseDouble(token.image)); }
|   token=<CHARACTER_LITERAL>
    { return new ArgChar(cleanChar(token.image)); }
|   token=<STRING_LITERAL>
    { return new ArgString(cleanString(token.image)); }
}

//
// Parse the name, name can be either identifier or sequence of identifiers
// connected with ".". Used for name of a class.
//
String name():
{
    Token token;
    String name;
}
{
    token=<IDENTIFIER> { name = token.toString(); }
    ( LOOKAHEAD(2) "." token=<IDENTIFIER> 
        {
            name += '.';
            name += token.image;
        }
    )*
    { return  name; }
}



