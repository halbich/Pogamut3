
    		/**
         	IMPORTANT !!!

         	DO NOT EDIT THIS FILE. IT IS GENERATED FROM 
         	THE JavaClassesGenerator.xslt. MODIFY THAT FILE INSTEAD OF THIS ONE.
         
         	Use Ant task process-gb-messages after that to generate this file again.
         
         	IMPORTANT END !!!
        	*/
 			   	
    		package cz.cuni.amis.pogamut.ut2004.communication.messages.gbinfomessages;

            import java.util.*;import javax.vecmath.*;import cz.cuni.amis.pogamut.base.communication.messages.*;import cz.cuni.amis.pogamut.base.communication.worldview.*;import cz.cuni.amis.pogamut.base.communication.worldview.event.*;import cz.cuni.amis.pogamut.base.communication.worldview.object.*;import cz.cuni.amis.pogamut.multi.communication.worldview.object.*;import cz.cuni.amis.pogamut.base.communication.translator.event.*;import cz.cuni.amis.pogamut.multi.communication.translator.event.*;import cz.cuni.amis.pogamut.base3d.worldview.object.*;import cz.cuni.amis.pogamut.base3d.worldview.object.event.*;import cz.cuni.amis.pogamut.ut2004.communication.messages.*;import cz.cuni.amis.pogamut.ut2004.communication.worldview.objects.*;import cz.cuni.amis.pogamut.ut2004multi.communication.worldview.objects.*;import cz.cuni.amis.pogamut.ut2004.communication.translator.itemdescriptor.*;import cz.cuni.amis.pogamut.ut2004.communication.messages.ItemType.Category;import cz.cuni.amis.pogamut.unreal.communication.messages.UnrealId;import cz.cuni.amis.utils.exception.*;import cz.cuni.amis.pogamut.base.communication.translator.event.IWorldObjectUpdateResult.Result;import cz.cuni.amis.utils.SafeEquals;import cz.cuni.amis.pogamut.base.agent.*;import cz.cuni.amis.pogamut.multi.agent.*;import cz.cuni.amis.pogamut.multi.communication.worldview.property.*;import cz.cuni.amis.pogamut.ut2004multi.communication.worldview.property.*;import cz.cuni.amis.utils.token.*;import cz.cuni.amis.utils.*;

            public class UT2004CompositeObjectCreator {
	
				public static interface ICompositeWorldObjectCreator<T extends ICompositeWorldObject> {
					
					public T create(ILocalWorldObject localPart, ISharedWorldObject sharedPart, IStaticWorldObject staticPart);
					
				}
				
				
					public static class AliveMessageCreator implements ICompositeWorldObjectCreator<AliveMessage> {
						
						@Override
						public AliveMessage
							   create(ILocalWorldObject localPart, ISharedWorldObject sharedPart, IStaticWorldObject staticPart) 
						{
							return 
								new
								AliveMessageCompositeImpl 
								( 
								 new
								  AliveMessageLocalImpl
								 ((AliveMessageLocal
								  )localPart
								 ), 
								 new
								  AliveMessageSharedImpl
								 (
								 	sharedPart.getId(), sharedPart.getProperties().values()
								 ), 
								 new
								  AliveMessageStaticImpl
								 ((AliveMessageStatic
								  )staticPart
								 )
								)
							;
						}
					}
				
				
					public static class AutoTraceRayCreator implements ICompositeWorldObjectCreator<AutoTraceRay> {
						
						@Override
						public AutoTraceRay
							   create(ILocalWorldObject localPart, ISharedWorldObject sharedPart, IStaticWorldObject staticPart) 
						{
							return 
								new
								AutoTraceRayCompositeImpl 
								( 
								 new
								  AutoTraceRayLocalImpl
								 ((AutoTraceRayLocal
								  )localPart
								 ), 
								 new
								  AutoTraceRaySharedImpl
								 (
								 	sharedPart.getId(), sharedPart.getProperties().values()
								 ), 
								 new
								  AutoTraceRayStaticImpl
								 ((AutoTraceRayStatic
								  )staticPart
								 )
								)
							;
						}
					}
				
				
					public static class BombInfoCreator implements ICompositeWorldObjectCreator<BombInfo> {
						
						@Override
						public BombInfo
							   create(ILocalWorldObject localPart, ISharedWorldObject sharedPart, IStaticWorldObject staticPart) 
						{
							return 
								new
								BombInfoCompositeImpl 
								( 
								 new
								  BombInfoLocalImpl
								 ((BombInfoLocal
								  )localPart
								 ), 
								 new
								  BombInfoSharedImpl
								 (
								 	sharedPart.getId(), sharedPart.getProperties().values()
								 ), 
								 new
								  BombInfoStaticImpl
								 ((BombInfoStatic
								  )staticPart
								 )
								)
							;
						}
					}
				
				
					public static class ConfigChangeCreator implements ICompositeWorldObjectCreator<ConfigChange> {
						
						@Override
						public ConfigChange
							   create(ILocalWorldObject localPart, ISharedWorldObject sharedPart, IStaticWorldObject staticPart) 
						{
							return 
								new
								ConfigChangeCompositeImpl 
								( 
								 new
								  ConfigChangeLocalImpl
								 ((ConfigChangeLocal
								  )localPart
								 ), 
								 new
								  ConfigChangeSharedImpl
								 (
								 	sharedPart.getId(), sharedPart.getProperties().values()
								 ), 
								 new
								  ConfigChangeStaticImpl
								 ((ConfigChangeStatic
								  )staticPart
								 )
								)
							;
						}
					}
				
				
					public static class EntityCreator implements ICompositeWorldObjectCreator<Entity> {
						
						@Override
						public Entity
							   create(ILocalWorldObject localPart, ISharedWorldObject sharedPart, IStaticWorldObject staticPart) 
						{
							return 
								new
								EntityCompositeImpl 
								( 
								 new
								  EntityLocalImpl
								 ((EntityLocal
								  )localPart
								 ), 
								 new
								  EntitySharedImpl
								 (
								 	sharedPart.getId(), sharedPart.getProperties().values()
								 ), 
								 new
								  EntityStaticImpl
								 ((EntityStatic
								  )staticPart
								 )
								)
							;
						}
					}
				
				
					public static class FlagInfoCreator implements ICompositeWorldObjectCreator<FlagInfo> {
						
						@Override
						public FlagInfo
							   create(ILocalWorldObject localPart, ISharedWorldObject sharedPart, IStaticWorldObject staticPart) 
						{
							return 
								new
								FlagInfoCompositeImpl 
								( 
								 new
								  FlagInfoLocalImpl
								 ((FlagInfoLocal
								  )localPart
								 ), 
								 new
								  FlagInfoSharedImpl
								 (
								 	sharedPart.getId(), sharedPart.getProperties().values()
								 ), 
								 new
								  FlagInfoStaticImpl
								 ((FlagInfoStatic
								  )staticPart
								 )
								)
							;
						}
					}
				
				
					public static class GameInfoCreator implements ICompositeWorldObjectCreator<GameInfo> {
						
						@Override
						public GameInfo
							   create(ILocalWorldObject localPart, ISharedWorldObject sharedPart, IStaticWorldObject staticPart) 
						{
							return 
								new
								GameInfoCompositeImpl 
								( 
								 new
								  GameInfoLocalImpl
								 ((GameInfoLocal
								  )localPart
								 ), 
								 new
								  GameInfoSharedImpl
								 (
								 	sharedPart.getId(), sharedPart.getProperties().values()
								 ), 
								 new
								  GameInfoStaticImpl
								 ((GameInfoStatic
								  )staticPart
								 )
								)
							;
						}
					}
				
				
					public static class IncomingProjectileCreator implements ICompositeWorldObjectCreator<IncomingProjectile> {
						
						@Override
						public IncomingProjectile
							   create(ILocalWorldObject localPart, ISharedWorldObject sharedPart, IStaticWorldObject staticPart) 
						{
							return 
								new
								IncomingProjectileCompositeImpl 
								( 
								 new
								  IncomingProjectileLocalImpl
								 ((IncomingProjectileLocal
								  )localPart
								 ), 
								 new
								  IncomingProjectileSharedImpl
								 (
								 	sharedPart.getId(), sharedPart.getProperties().values()
								 ), 
								 new
								  IncomingProjectileStaticImpl
								 ((IncomingProjectileStatic
								  )staticPart
								 )
								)
							;
						}
					}
				
				
					public static class InitedMessageCreator implements ICompositeWorldObjectCreator<InitedMessage> {
						
						@Override
						public InitedMessage
							   create(ILocalWorldObject localPart, ISharedWorldObject sharedPart, IStaticWorldObject staticPart) 
						{
							return 
								new
								InitedMessageCompositeImpl 
								( 
								 new
								  InitedMessageLocalImpl
								 ((InitedMessageLocal
								  )localPart
								 ), 
								 new
								  InitedMessageSharedImpl
								 (
								 	sharedPart.getId(), sharedPart.getProperties().values()
								 ), 
								 new
								  InitedMessageStaticImpl
								 ((InitedMessageStatic
								  )staticPart
								 )
								)
							;
						}
					}
				
				
					public static class ItemCreator implements ICompositeWorldObjectCreator<Item> {
						
						@Override
						public Item
							   create(ILocalWorldObject localPart, ISharedWorldObject sharedPart, IStaticWorldObject staticPart) 
						{
							return 
								new
								ItemCompositeImpl 
								( 
								 new
								  ItemLocalImpl
								 ((ItemLocal
								  )localPart
								 ), 
								 new
								  ItemSharedImpl
								 (
								 	sharedPart.getId(), sharedPart.getProperties().values()
								 ), 
								 new
								  ItemStaticImpl
								 ((ItemStatic
								  )staticPart
								 )
								)
							;
						}
					}
				
				
					public static class MoverCreator implements ICompositeWorldObjectCreator<Mover> {
						
						@Override
						public Mover
							   create(ILocalWorldObject localPart, ISharedWorldObject sharedPart, IStaticWorldObject staticPart) 
						{
							return 
								new
								MoverCompositeImpl 
								( 
								 new
								  MoverLocalImpl
								 ((MoverLocal
								  )localPart
								 ), 
								 new
								  MoverSharedImpl
								 (
								 	sharedPart.getId(), sharedPart.getProperties().values()
								 ), 
								 new
								  MoverStaticImpl
								 ((MoverStatic
								  )staticPart
								 )
								)
							;
						}
					}
				
				
					public static class MyInventoryCreator implements ICompositeWorldObjectCreator<MyInventory> {
						
						@Override
						public MyInventory
							   create(ILocalWorldObject localPart, ISharedWorldObject sharedPart, IStaticWorldObject staticPart) 
						{
							return 
								new
								MyInventoryCompositeImpl 
								( 
								 new
								  MyInventoryLocalImpl
								 ((MyInventoryLocal
								  )localPart
								 ), 
								 new
								  MyInventorySharedImpl
								 (
								 	sharedPart.getId(), sharedPart.getProperties().values()
								 ), 
								 new
								  MyInventoryStaticImpl
								 ((MyInventoryStatic
								  )staticPart
								 )
								)
							;
						}
					}
				
				
					public static class NavPointCreator implements ICompositeWorldObjectCreator<NavPoint> {
						
						@Override
						public NavPoint
							   create(ILocalWorldObject localPart, ISharedWorldObject sharedPart, IStaticWorldObject staticPart) 
						{
							return 
								new
								NavPointCompositeImpl 
								( 
								 new
								  NavPointLocalImpl
								 ((NavPointLocal
								  )localPart
								 ), 
								 new
								  NavPointSharedImpl
								 (
								 	sharedPart.getId(), sharedPart.getProperties().values()
								 ), 
								 new
								  NavPointStaticImpl
								 ((NavPointStatic
								  )staticPart
								 )
								)
							;
						}
					}
				
				
					public static class PlayerCreator implements ICompositeWorldObjectCreator<Player> {
						
						@Override
						public Player
							   create(ILocalWorldObject localPart, ISharedWorldObject sharedPart, IStaticWorldObject staticPart) 
						{
							return 
								new
								PlayerCompositeImpl 
								( 
								 new
								  PlayerLocalImpl
								 ((PlayerLocal
								  )localPart
								 ), 
								 new
								  PlayerSharedImpl
								 (
								 	sharedPart.getId(), sharedPart.getProperties().values()
								 ), 
								 new
								  PlayerStaticImpl
								 ((PlayerStatic
								  )staticPart
								 )
								)
							;
						}
					}
				
				
					public static class SelfCreator implements ICompositeWorldObjectCreator<Self> {
						
						@Override
						public Self
							   create(ILocalWorldObject localPart, ISharedWorldObject sharedPart, IStaticWorldObject staticPart) 
						{
							return 
								new
								SelfCompositeImpl 
								( 
								 new
								  SelfLocalImpl
								 ((SelfLocal
								  )localPart
								 ), 
								 new
								  SelfSharedImpl
								 (
								 	sharedPart.getId(), sharedPart.getProperties().values()
								 ), 
								 new
								  SelfStaticImpl
								 ((SelfStatic
								  )staticPart
								 )
								)
							;
						}
					}
				
				
					public static class TeamScoreCreator implements ICompositeWorldObjectCreator<TeamScore> {
						
						@Override
						public TeamScore
							   create(ILocalWorldObject localPart, ISharedWorldObject sharedPart, IStaticWorldObject staticPart) 
						{
							return 
								new
								TeamScoreCompositeImpl 
								( 
								 new
								  TeamScoreLocalImpl
								 ((TeamScoreLocal
								  )localPart
								 ), 
								 new
								  TeamScoreSharedImpl
								 (
								 	sharedPart.getId(), sharedPart.getProperties().values()
								 ), 
								 new
								  TeamScoreStaticImpl
								 ((TeamScoreStatic
								  )staticPart
								 )
								)
							;
						}
					}
				
				
					public static class VehicleCreator implements ICompositeWorldObjectCreator<Vehicle> {
						
						@Override
						public Vehicle
							   create(ILocalWorldObject localPart, ISharedWorldObject sharedPart, IStaticWorldObject staticPart) 
						{
							return 
								new
								VehicleCompositeImpl 
								( 
								 new
								  VehicleLocalImpl
								 ((VehicleLocal
								  )localPart
								 ), 
								 new
								  VehicleSharedImpl
								 (
								 	sharedPart.getId(), sharedPart.getProperties().values()
								 ), 
								 new
								  VehicleStaticImpl
								 ((VehicleStatic
								  )staticPart
								 )
								)
							;
						}
					}
				
				
				private static Map<Class, ICompositeWorldObjectCreator> creators = new HashMap<Class, ICompositeWorldObjectCreator>();
				
				static {
					
						creators.put(
							AliveMessage
							.class, 
							new AliveMessageCreator());
					
						creators.put(
							AutoTraceRay
							.class, 
							new AutoTraceRayCreator());
					
						creators.put(
							BombInfo
							.class, 
							new BombInfoCreator());
					
						creators.put(
							ConfigChange
							.class, 
							new ConfigChangeCreator());
					
						creators.put(
							Entity
							.class, 
							new EntityCreator());
					
						creators.put(
							FlagInfo
							.class, 
							new FlagInfoCreator());
					
						creators.put(
							GameInfo
							.class, 
							new GameInfoCreator());
					
						creators.put(
							IncomingProjectile
							.class, 
							new IncomingProjectileCreator());
					
						creators.put(
							InitedMessage
							.class, 
							new InitedMessageCreator());
					
						creators.put(
							Item
							.class, 
							new ItemCreator());
					
						creators.put(
							Mover
							.class, 
							new MoverCreator());
					
						creators.put(
							MyInventory
							.class, 
							new MyInventoryCreator());
					
						creators.put(
							NavPoint
							.class, 
							new NavPointCreator());
					
						creators.put(
							Player
							.class, 
							new PlayerCreator());
					
						creators.put(
							Self
							.class, 
							new SelfCreator());
					
						creators.put(
							TeamScore
							.class, 
							new TeamScoreCreator());
					
						creators.put(
							Vehicle
							.class, 
							new VehicleCreator());
					
				}
				
				
				public static ICompositeWorldObject createObject(ILocalWorldObject localPart, ISharedWorldObject sharedPart, IStaticWorldObject staticPart)
				{
					NullCheck.check(localPart,  "localPart");
					NullCheck.check(sharedPart, "sharedPart");
					NullCheck.check(staticPart, "staticPart");
					
					NullCheck.check(localPart.getCompositeClass(),  "localPart.getCompositeClass()");
					NullCheck.check(sharedPart.getCompositeClass(), "sharedPart.getCompositeClass()");
					NullCheck.check(staticPart.getCompositeClass(), "staticPart.getCompositeClass()");
					
					if ( localPart.getCompositeClass() != sharedPart.getCompositeClass() || sharedPart.getCompositeClass() != staticPart.getCompositeClass()) {
						throw new PogamutException("CompositeObject cannot be created, because the objectParts belong to different compositeObject classes : "
								+ localPart.getCompositeClass() + "," + sharedPart.getCompositeClass() + "," + staticPart.getCompositeClass() , localPart);
					}
					
					ICompositeWorldObjectCreator creator = creators.get(localPart.getCompositeClass());
					if (creator == null) {
						throw new PogamutException("There is no ICompositeWorldObjectCreator registered for class " + localPart.getCompositeClass(), UT2004CompositeObjectCreator.class);
					} 
					
					return creator.create(localPart, sharedPart, staticPart);
				}
			}
    	